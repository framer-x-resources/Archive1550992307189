/**
 * Usage
 */
// import util from '../../../../../ruucm-util/';
// import { log } from '../../../../../ruucm-util/';

var environment = {
  production: false
};
export const log = (name, data) => {
  if (data === void 0) {
    data = null;
  }

  if (!environment.production) {
    if (data) {
      console.log(name + " ->", data);
      if (
        data === false ||
        data === true ||
        data === null ||
        data === undefined
      ) {
        console.log(data);
      }
    } else console.log(name);
  }
};
export const objectValue = (func, defaultValue) => {
  try {
    return func();
  } catch (err) {
    return defaultValue;
  }
};
export const ArrayToObject = arr => {
  var rv = {};
  for (var i = 0; i < arr.length; ++i) rv[arr[i]] = true;
  return rv;
};
export const ObjectToArray = obj => {
  var result = Object.values(obj);
  return result;
};

export const commaPipe = number => {
  if (number != null)
    return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
};

export const getParameterByName = (name, url) => {
  if (!url) url = window.location.href;
  name = name.replace(/[\[\]]/g, "\\$&");
  var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
    results = regex.exec(url);
  if (!results) return null;
  if (!results[2]) return "";
  return decodeURIComponent(results[2].replace(/\+/g, " "));
};

export default {
  log: log,
  getParameterByName: getParameterByName,
  objectValue: objectValue,
  ArrayToObject: ArrayToObject,
  ObjectToArray: ObjectToArray
};
